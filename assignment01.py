# -*- coding: utf-8 -*-
"""ASSIGNMENT01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12CxllXJ56f9MZrcEOGVDnsAxAwR9BBRh
"""

# Q1 :- Import the numpy package under the name np
import numpy as np

## Q2:- Create a null vector of size 10
x = np.zeros(10)
print(x)

# Q3:- Create a vector with values ranging from 10 to 49
v=np.arange(10,49)
print(v)

# Q4:- Find the shape of previous array in question 3
v.shape

# Q5:- Print the type of the previous array in question 3
v.dtype

# Q6:- Print the numpy version and the configuration
import numpy as np
print(np.__version__)
print(np.show_config())

# Q7:- Print the dimension of the array in question 3
v.ndim

# Q8:- Create a boolean array with all the True values
arr1=np.ones((2,2), dtype= bool)
print(arr1)

# Q9:- Create a two dimensional array
array_2d=np.arange(20).reshape(4,5)
array_2d

# Q10:- Create a three dimensional array
array_3d=np.arange(64).reshape(4,4,4)
array_3d

# Q 11:- Reverse a vector (first element becomes last)
x = np.arange(1, 20)
print("Original array:")
print(x)
print("Reverse array:")
x = x[::-1]
print(x)

# Q 12:- Create a null vector of size 10 but the fifth value which is 1
y=np.zeros(10)
print("Original array:")
print(y)
print("Update fifth value to 1")
y[4] = 1
print(y)

# Q 13:- Create a 3x3 identity matrix
import numpy as np
array_2D=np.identity(3)
print('3x3 matrix:')
print(array_2D)

# Q 14:- arr = np.array([1, 2, 3, 4, 5])
#Convert the data type of the given array from int to float
arr = np.array([1, 2, 3, 4, 5])
# See the output
print(arr)
# Print the dtype 
print(arr.dtype) 
# change the dtype to 'float64' 
arr = arr.astype('float64')  
# Print the array after changing 
# the data type 
print(arr) 
  
# Also print the data type 
print(arr.dtype)

#Q 15:- 
#         arr1 = np.array([[1., 2., 3.],

#                         [4., 5., 6.]])  

#            arr2 = np.array([[0., 4., 1.],

#           [7., 2., 12.]])
#Multiply arr1 with arr2
arr1 = np.array([[1., 2., 3.],

                 [4., 5., 6.]])  

arr2 = np.array([[0., 4., 1.],

                 [7., 2., 12.]])
result=arr1*arr2
print(result)

# Q 16:- 
# arr1 = np.array([[1., 2., 3.],

 #           [4., 5., 6.]]) 

#arr2 = np.array([[0., 4., 1.],

 #           [7., 2., 12.]])
#   Make an array by comparing both the arrays provided above
import numpy as np
arr1 = np.array([[1., 2., 3.],

                 [4., 5., 6.]]) 

arr2 = np.array([[0., 4., 1.],

                 [7., 2., 12.]])
arr2>arr1

# Q 17:-
# Extract all odd numbers from arr with values(0-9)
import numpy as np
a = np.arange(10)
e=a[a % 2 == 1]
print(e)

# Q 18:- Replace all odd numbers to -1 from previous array
import numpy as np
a = np.arange(10)
a[a % 2 == 1]=-1
print(a)

#Q 19:- arr = np.arange(10)
# Replace the values of indexes 5,6,7 and 8 to 12 
array=np.arange(10)
array[5:9]=12
print(array)

# Q 20:- Create a 2d array with 1 on the border and 0 inside
import numpy as np
x = np.ones((5,5))
print("Original array:")
print(x)
print("1 on the border and 0 inside in the array")
x[1:-1,1:-1] = 0
print(x)

# Q 21:- arr2d = np.array([[1, 2, 3],

   #                        [4, 5, 6], 

  #                         [7, 8, 9]])
# Replace the value 5 to 12
arr2d = np.array([[1, 2, 3],

                 [4, 5, 6], 

                 [7, 8, 9]])
arr2d[1][1]=12
print(arr2d)

# Q 22:- arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
# Convert all the values of 1st array to 64
arr3d = np.array([
                  [[1, 2, 3], [4, 5, 6]],
                  [[7, 8, 9], [10, 11, 12]]
                  ])
arr3d[0]=64
print(arr3d)

# Q 23:- Make a 2-Dimensional array with values 0-9 and slice out the first 1st 1-D array from it
import numpy as np
array_2d=np.arange(10).reshape(2,5)
print(array_2d)
array_2d[:1]

# Q 24:- Make a 2-Dimensional array with values 0-9 and slice out the 2nd value from 2nd 1-D array from it
array_2d[1][1]

# Q 25:- Make a 2-Dimensional array with values 0-9 and slice out the third column but only the first two rows
import numpy as np
arr_2d=np.array([[1, 2, 3],
                 [4, 5, 6],
                 [7, 8, 9]])
print(arr_2d)
print("The array sliced with third column but of only first two rows is:- ")
print(arr_2d[:2, 2])
print(arr_2d[1,:2])
print(arr_2d[1:2,:2])

# Q 26:- Create a 10x10 array with random values and find the minimum and maximum values
import numpy as np
x = np.random.random((10,10))
print("Original Array:")
print(x) 
xmin, xmax = x.min(), x.max()
print("Minimum and Maximum Values:")
print(xmin, xmax)

#Q 27:- a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
#Find the common items between a and b
import numpy as np
a=np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
print("The common items in array a and array b are:")
np.intersect1d(a, b)

# Q 28:- a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
#Find the positions where elements of a and b match
import numpy as np
array1 = np.array([1,2,3,2,3,4,3,4,5,6])
print("Array1: ",array1)
array2 = np.array([7,2,10,2,7,4,9,4,9,8])
print("Array2: ",array2)
print("Common values between two arrays:")
x=np.where(array1==array2)
print(x)

# Q 29:- names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)
#Find all the values from array data where the values from array names are not equal to Will
import numpy as np
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
data = np.random.randn(7, 4)
print(names)
print(data)
mask = (names != 'Will')
print(mask)
print(data[mask])

# Q30:- names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)
#Find all the values from array data where the values from array names are not equal to Will and Joe
import numpy as np
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
data = np.random.randn(7, 4)
print(names)
print(data)
mask = (names != 'Will') & (names != 'Joe')
print(mask)
print(data[mask])

# Q 31:- Create a 2D array of shape 5x3 to contain decimal numbers between 1 and 15
import numpy as np
arr4=np.arange(1,16).reshape(5,3)
arr4

# Q 32:- Create an array of shape (2, 2, 4) with decimal numbers between 1 to 16
import numpy as np
arr5=np.arange(1,17).reshape(2,2,4)
arr5

# Q 33:- Swap axes of the array you created in Question 32
arr5=np.arange(1,17).reshape(2,2,4)
np.swapaxes(arr5,1,2)

# Q 34:- Create an array of size 10, and find the square root of every element in the array, if the values less than 0.5, replace them with 0
import numpy as np
arr=np.arange(10)
print("The original Array is:")
print(arr)
print("The Square Root of array is : ")
np.sqrt(arr)

#Q 35:- Create two random arrays of range 12 and make an array with the maximum values between each element of the two arrays
import numpy as np
x=np.random.randn(12)
print("Randomly Generated Array stored in x is as under:")
print(x)
print("Randomly Generated Array stored in y is as under:")
print(y)
y= np.random.randn(12)
print("The returned maximum array element wise after comparing x and y is as under:")
np.maximum(x,y)

# Q 36:- names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
#Find the unique names and sort them out!
import numpy as np
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
print("Original array:")
print(names)
print("Unique elements of the above array:")
x=(np.unique(names))
print(x)
x.sort()

# Q 37:- a = np.array([1,2,3,4,5]) b = np.array([5,6,7,8,9]
#From array a remove all items present in array b
import numpy as np
a=np.array([1,2,3,4,5])
b=np.array([5,6,7,8,9])
print("The elements of a which are not present in b are:")
np.setdiff1d(a, b, assume_unique=False)

# Q 38:- Following is the input NumPy array delete column two and insert following new column in its place.
#sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]])
#newColumn = numpy.array([[10,10,10]])
import numpy as np

print("Printing Original array")
sampleArray = np.array([[34,43,73],[82,22,12],[53,94,66]]) 
print (sampleArray)

print("Array after deleting column 2 on axis 1")
sampleArray = np.delete(sampleArray , 1, axis = 1) 
print (sampleArray)

newColumn = np.array([[10,10,10]])

print("Array after inserting column 2 on axis 1")
sampleArray = np.insert(sampleArray , 1, newColumn, axis = 1) 
print (sampleArray)

# Q 39:-
#x = np.array([[1., 2., 3.], [4., 5., 6.]]) y = np.array([[6., 23.], [-1, 7], [8, 9]])
#Find the dot product of the above two matrix
import numpy as np
x = np.array([[1., 2., 3.], [4., 5., 6.]])
y = np.array([[6., 23.], [-1, 7], [8, 9]])
print(x)
print(y)
print("The dot product of the above two x and y matrices is:")
Dot_product=x.dot(y)
print(Dot_product)

# Q 40:-
#Generate a matrix of 20 random values and find its cumulative sum
import numpy as np
matrix_random = np.random.randn(4,5)
print(matrix_random)
matrix_random.cumsum()